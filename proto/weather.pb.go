// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/weather.proto

package proto

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TopCityRequest struct {
}

func (m *TopCityRequest) Reset()         { *m = TopCityRequest{} }
func (m *TopCityRequest) String() string { return proto.CompactTextString(m) }
func (*TopCityRequest) ProtoMessage()    {}
func (*TopCityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecdc6c2fb8d35c9c, []int{0}
}
func (m *TopCityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopCityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopCityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopCityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopCityRequest.Merge(m, src)
}
func (m *TopCityRequest) XXX_Size() int {
	return m.Size()
}
func (m *TopCityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TopCityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TopCityRequest proto.InternalMessageInfo

type TopCityResponse struct {
	Result string `protobuf:"bytes,1,opt,name=Result,proto3" json:"result,omitempty"`
}

func (m *TopCityResponse) Reset()         { *m = TopCityResponse{} }
func (m *TopCityResponse) String() string { return proto.CompactTextString(m) }
func (*TopCityResponse) ProtoMessage()    {}
func (*TopCityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecdc6c2fb8d35c9c, []int{1}
}
func (m *TopCityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopCityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopCityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopCityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopCityResponse.Merge(m, src)
}
func (m *TopCityResponse) XXX_Size() int {
	return m.Size()
}
func (m *TopCityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TopCityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TopCityResponse proto.InternalMessageInfo

func (m *TopCityResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type IndicesRequest struct {
	Days int64 `protobuf:"varint,1,opt,name=Days,proto3" json:"days"`
}

func (m *IndicesRequest) Reset()         { *m = IndicesRequest{} }
func (m *IndicesRequest) String() string { return proto.CompactTextString(m) }
func (*IndicesRequest) ProtoMessage()    {}
func (*IndicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecdc6c2fb8d35c9c, []int{2}
}
func (m *IndicesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndicesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndicesRequest.Merge(m, src)
}
func (m *IndicesRequest) XXX_Size() int {
	return m.Size()
}
func (m *IndicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IndicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IndicesRequest proto.InternalMessageInfo

func (m *IndicesRequest) GetDays() int64 {
	if m != nil {
		return m.Days
	}
	return 0
}

type IndicesResponse struct {
	Days int64 `protobuf:"varint,1,opt,name=Days,proto3" json:"days"`
}

func (m *IndicesResponse) Reset()         { *m = IndicesResponse{} }
func (m *IndicesResponse) String() string { return proto.CompactTextString(m) }
func (*IndicesResponse) ProtoMessage()    {}
func (*IndicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecdc6c2fb8d35c9c, []int{3}
}
func (m *IndicesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndicesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndicesResponse.Merge(m, src)
}
func (m *IndicesResponse) XXX_Size() int {
	return m.Size()
}
func (m *IndicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IndicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IndicesResponse proto.InternalMessageInfo

func (m *IndicesResponse) GetDays() int64 {
	if m != nil {
		return m.Days
	}
	return 0
}

func init() {
	proto.RegisterType((*TopCityRequest)(nil), "proto.TopCityRequest")
	proto.RegisterType((*TopCityResponse)(nil), "proto.TopCityResponse")
	proto.RegisterType((*IndicesRequest)(nil), "proto.IndicesRequest")
	proto.RegisterType((*IndicesResponse)(nil), "proto.IndicesResponse")
}

func init() { proto.RegisterFile("proto/weather.proto", fileDescriptor_ecdc6c2fb8d35c9c) }

var fileDescriptor_ecdc6c2fb8d35c9c = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x4f, 0x4d, 0x2c, 0xc9, 0x48, 0x2d, 0xd2, 0x03, 0xf3, 0x84, 0x58, 0xc1, 0x94,
	0x94, 0x49, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x7e, 0x7a, 0x7e, 0x7a,
	0xbe, 0x3e, 0x58, 0x38, 0xa9, 0x34, 0xcd, 0xa1, 0xcc, 0x50, 0xcf, 0x58, 0xcf, 0x08, 0x2c, 0x08,
	0xd1, 0x0f, 0x62, 0x41, 0x34, 0x2b, 0x09, 0x70, 0xf1, 0x85, 0xe4, 0x17, 0x38, 0x67, 0x96, 0x54,
	0x06, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x28, 0xd9, 0x73, 0xf1, 0xc3, 0x45, 0x8a, 0x0b, 0xf2,
	0xf3, 0x8a, 0x53, 0x85, 0x74, 0xb8, 0xd8, 0x82, 0x52, 0x8b, 0x4b, 0x73, 0x4a, 0x24, 0x18, 0x15,
	0x18, 0x35, 0x38, 0x9d, 0x44, 0x5e, 0xdd, 0x93, 0x17, 0x28, 0x02, 0x8b, 0xe8, 0xe4, 0xe7, 0x66,
	0x96, 0xa4, 0xe6, 0x16, 0x94, 0x54, 0x06, 0x41, 0xd5, 0x28, 0xe9, 0x71, 0xf1, 0x79, 0xe6, 0xa5,
	0x64, 0x26, 0xa7, 0x16, 0x43, 0x8d, 0x14, 0x92, 0xe1, 0x62, 0x71, 0x49, 0xac, 0x2c, 0x06, 0xeb,
	0x66, 0x76, 0xe2, 0x78, 0x75, 0x4f, 0x9e, 0x25, 0x25, 0xb1, 0xb2, 0x38, 0x08, 0x2c, 0xaa, 0xa4,
	0xcf, 0xc5, 0x0f, 0x57, 0x0f, 0xb5, 0x10, 0xaf, 0x06, 0xa3, 0x46, 0x46, 0x2e, 0xf6, 0x70, 0x48,
	0x10, 0x08, 0x59, 0x71, 0xb1, 0x43, 0x35, 0x0b, 0x89, 0x42, 0xbc, 0xa4, 0x87, 0x6a, 0xb9, 0x94,
	0x18, 0xba, 0x30, 0xc4, 0x0e, 0x25, 0x06, 0x90, 0x5e, 0xa8, 0x4f, 0xe1, 0x7a, 0x51, 0xc3, 0x02,
	0xae, 0x17, 0x2d, 0x40, 0x94, 0x18, 0x9c, 0x24, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e,
	0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58,
	0x8e, 0x21, 0x89, 0x0d, 0xac, 0xc5, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xfe, 0xed, 0xcb, 0xc0,
	0xac, 0x01, 0x00, 0x00,
}

func (m *TopCityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopCityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopCityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TopCityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopCityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopCityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintWeather(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IndicesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndicesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndicesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Days != 0 {
		i = encodeVarintWeather(dAtA, i, uint64(m.Days))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IndicesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndicesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndicesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Days != 0 {
		i = encodeVarintWeather(dAtA, i, uint64(m.Days))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintWeather(dAtA []byte, offset int, v uint64) int {
	offset -= sovWeather(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TopCityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TopCityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovWeather(uint64(l))
	}
	return n
}

func (m *IndicesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Days != 0 {
		n += 1 + sovWeather(uint64(m.Days))
	}
	return n
}

func (m *IndicesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Days != 0 {
		n += 1 + sovWeather(uint64(m.Days))
	}
	return n
}

func sovWeather(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWeather(x uint64) (n int) {
	return sovWeather(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TopCityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeather
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopCityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopCityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWeather(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWeather
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopCityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeather
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopCityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopCityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeather
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeather
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWeather
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWeather(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWeather
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndicesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeather
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndicesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndicesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Days", wireType)
			}
			m.Days = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeather
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Days |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWeather(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWeather
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndicesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeather
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndicesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndicesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Days", wireType)
			}
			m.Days = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeather
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Days |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWeather(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWeather
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWeather(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWeather
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWeather
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWeather
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWeather
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWeather
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWeather
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWeather        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWeather          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWeather = fmt.Errorf("proto: unexpected end of group")
)
